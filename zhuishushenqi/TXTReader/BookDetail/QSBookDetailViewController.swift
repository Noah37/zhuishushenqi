//
//  QSBookDetailViewController.swift
//  zhuishushenqi
//
//  Created Nory Cao on 2017/4/13.
//  Copyright © 2017年 QS. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class QSBookDetailViewController: BaseViewController,UITableViewDataSource,UITableViewDelegate,QSBookDetailViewProtocol {
    
    var presenter: QSBookDetailPresenterProtocol?
    
    var rateView:QSBookDetailRateView!
    var tagsView:QSBookDetailTagsView!
    var contentView:QSBookDetailContentView!
    var commentHeaderView:UIView!
    var detailHeaderView:BookDetailHeader!
    var id:String = ""
    
    fileprivate var tagColor = [UIColor(red: 0.56, green: 0.77, blue: 0.94, alpha: 1.0),
                                UIColor(red: 0.75, green: 0.41, blue: 0.82, alpha: 1.0),
                                UIColor(red: 0.96, green: 0.74, blue: 0.49, alpha: 1.0),
                                UIColor(red: 0.57, green: 0.81, blue: 0.84, alpha: 1.0),
                                UIColor(red: 0.40, green: 0.80, blue: 0.72, alpha: 1.0),
                                UIColor(red: 0.91, green: 0.56, blue: 0.56, alpha: 1.0),
                                UIColor(red: 0.56, green: 0.77, blue: 0.94, alpha: 1.0),
                                UIColor(red: 0.75, green: 0.41, blue: 0.82, alpha: 1.0)]
    fileprivate var sectionTwoY:CGFloat = 0
    fileprivate var bookModel:BookDetail?
    fileprivate var hotComment:[BookComment]?
    fileprivate var reBooks:[Book]?
    fileprivate var recList:[QSBookList]?
    fileprivate let CONTENT_TAG = 11223
    fileprivate var contentShow:Bool = false
    
    lazy var tableView:UITableView = {
        let tableView = UITableView(frame: CGRect(x: 0, y: 64, width: ScreenWidth, height: ScreenHeight - 64), style: .grouped)
        tableView.dataSource = self
        tableView.delegate = self
        tableView.separatorStyle = .singleLine
        tableView.qs_registerCellNib(HotCommentCell.self)
        tableView.qs_registerCellNib(QSRecommendCell.self)
        tableView.qs_registerCellNib(QSBookListViewCell.self)
        tableView.backgroundColor = UIColor(red: 0.95, green: 0.95, blue: 0.95, alpha: 1.0)
        return tableView
    }()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        initSubview()
        presenter?.viewDidLoad(id: id)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationController?.isNavigationBarHidden = false
    }
    
    func initSubview(){
        let titleView = UIView(frame: CGRect(x: 0,y: 0,width: 120,height: 30))
        let titleLabel = UILabel(frame: CGRect(x: 0,y: 0,width: 90,height: 30))
        titleLabel.textAlignment = .center
        titleLabel.text = "书籍详情"
        let titleShare = UIImageView(image: UIImage(named: "bd_share"))
        let width = (titleLabel.text! as NSString).boundingRect(with: CGSize(width: CGFloat.greatestFiniteMagnitude, height: 30), options: .usesLineFragmentOrigin, attributes: [NSAttributedString.Key.font:UIFont.systemFont(ofSize: 13)], context: nil)
        titleShare.frame = CGRect(x: width.size.width/2 + 120/2, y: 5, width: 20, height: 20)
        let ges = UITapGestureRecognizer(target: self, action: #selector(shareAction(_:)))
        titleShare.addGestureRecognizer(ges)
        titleView.addSubview(titleShare)
        titleView.addSubview(titleLabel)
        navigationItem.titleView = titleView
        
        let rightItem = UIBarButtonItem(title: "全本缓存", style: .plain, target: self, action: #selector(allCache(_:)))
        navigationItem.rightBarButtonItem = rightItem
        getCommentHeader()
        getDetailHeader()
        getContentView()
        
        rateView = QSBookDetailRateView(frame: CGRect(x: 0, y: 0, width: self.view.bounds.width, height: 80))
        tagsView = QSBookDetailTagsView(frame: CGRect(x: 0, y: 0, width: self.view.bounds.width, height: 50))
        contentView = QSBookDetailContentView(frame: CGRect(x: 0, y: 0, width: self.view.bounds.width, height: 50))
        view.addSubview(self.tableView)
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        let counts = [3,self.hotComment?.count ?? 0,1,1,recList?.count ?? 3]
        return counts[section]
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 5
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let iden = "CellIden"
        var cell = tableView.dequeueReusableCell(withIdentifier: iden)
        if cell == nil {
            cell = UITableViewCell(style: .subtitle, reuseIdentifier: iden)
            cell?.backgroundColor = UIColor.clear
            cell?.selectionStyle = .none
            cell?.contentView.layer.masksToBounds = true
        }
        if indexPath.section == 0 {
            cell?.accessoryType = .none
            let views:[UIView] = [rateView,tagsView,contentView]
            views[indexPath.row].removeFromSuperview()
            cell?.contentView.addSubview(views[indexPath.row])
        }else if indexPath.section == 1{
            let hotCell:HotCommentCell = tableView.qs_dequeueReusableCell(HotCommentCell.self)
            hotCell.model = self.hotComment?[indexPath.row]
            return hotCell
        }else if indexPath.section == 2 {
            cell = UITableViewCell(style: .subtitle, reuseIdentifier: iden)
            cell?.textLabel?.text = "\(bookModel?.title ?? "")的社区"
            cell?.textLabel?.font = UIFont.systemFont(ofSize: 15)
            cell?.detailTextLabel?.text = "共有\(bookModel?.postCount ?? 0)个帖子"
            cell?.detailTextLabel?.textColor = UIColor.darkGray
            cell?.accessoryType = .disclosureIndicator
            return cell!
        }else if indexPath.section == 3 {
            let reCell = tableView.qs_dequeueReusableCell(QSRecommendCell.self)
            reCell?.clickAction = { (btn:Any) in
                self.presenter?.didClickRecBtn(btn:btn as! UIView)
            }
            reCell?.books = reBooks
            return reCell!
        }else if indexPath.section == 4{
            let listCell = tableView.qs_dequeueReusableCell(QSBookListViewCell.self)
            if let list = recList{
                listCell?.book = list[indexPath.row]
            }
            return listCell!
        }
        return cell!
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let headerView = UIView(frame: CGRect(x: 0, y: 0, width: self.view.bounds.width, height: 50))
        headerView.backgroundColor = UIColor.white
        let label = UILabel(frame: CGRect(x: 15, y: 0, width: self.view.bounds.width - 30, height: 50))
        label.text = "推荐书单"
        headerView.addSubview(label)
        let headers:[UIView] = [detailHeaderView,commentHeaderView,UIView(),UIView(),headerView]
        return headers[section]
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        let heights:[CGFloat] = [165.0,30.0,0.001,0.001,50]
        return heights[section]
    }
    
    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
        return 10
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        let heights:[CGFloat] = [127,60,180,100]
        if indexPath.section == 0 {
            let height = QSBookDetailContentView.height(intro: self.bookModel?.longIntro ?? "",show:self.contentShow)
            contentView.frame = CGRect(x: 0, y: 0, width: self.view.bounds.width, height: height)
            let tagHeight = QSBookDetailTagsView.height(tags: self.bookModel?.tags as? [String] ?? [])
            tagsView.frame = CGRect(x: 0, y: 0, width: self.view.bounds.width, height: tagHeight)
            let sectionOne:[CGFloat] = [80,tagHeight,height]
            return sectionOne[indexPath.row]
        }else {
            return heights[indexPath.section - 1]
        }
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        presenter?.didSelectRow(indexPath: indexPath)
    }
    
    func showContent(show: Bool) {
        contentShow = show
        self.contentView.contentShow = contentShow
        self.tableView.reloadData()
    }
    
    @objc func moreCommentAction(btn:UIButton){
        let indexPath = IndexPath(row: 0, section: 2)
        presenter?.didSelectRow(indexPath: indexPath)
        
    }
    
    @objc func allCache(_ item:UIBarButtonItem){
        
    }
    
    @objc func shareAction(_ tap:UITapGestureRecognizer){
        
    }
    
    func getContentView(){
        
    }
    
    func getCommentHeader(){
        commentHeaderView = UIView()
        commentHeaderView.backgroundColor = UIColor.white
        let label = UILabel()
        label.text = "热门评论"
        label.font = UIFont.systemFont(ofSize: 13)
        label.textColor = UIColor.darkGray
        label.frame = CGRect(x: 15, y: 0, width: 100, height: 30)
        commentHeaderView.addSubview(label)
        
        let moreBtn = UIButton(type: .custom)
        moreBtn.frame = CGRect(x: self.view.bounds.width - 135, y: 0, width: 120, height: 30)
        moreBtn.setTitle("更多", for: .normal)
        moreBtn.setTitleColor(UIColor.darkGray, for: .normal)
        moreBtn.titleLabel?.font = UIFont.systemFont(ofSize: 13)
        moreBtn.addTarget(self, action: #selector(moreCommentAction(btn:)), for: .touchUpInside)
        moreBtn.contentHorizontalAlignment = .right
        commentHeaderView.addSubview(moreBtn)
    }
    
    func getDetailHeader(){
        detailHeaderView = (UINib(nibName: "BookDetailHeader", bundle: nil).instantiate(withOwner: self, options: nil) as NSArray).object(at: 0) as? BookDetailHeader
        detailHeaderView?.model = bookModel
        detailHeaderView?.addBtnAction = { (isSelected:Bool,model:BookDetail) in
            self.presenter?.didClickPersueBtn(model: model, select: isSelected)
        }
        detailHeaderView?.startReading = {(isSelected:Bool,model:BookDetail) in
            self.presenter?.didClickReadingBtn(model: model, select: isSelected)
        }
    }
    
    func showResult(bookDetail:BookDetail,comment:[BookComment]){
        self.bookModel = bookDetail
        self.hotComment = comment
        self.reloadData()
    }
    
    func showRecommend(list: [Book]) {
        self.reBooks = list
        self.tableView.reloadData()
    }
    
    func showRecBookList(list: [QSBookList]) {
        self.recList = list
        self.tableView.reloadData()
    }
    
    func reloadData(){
        tagsView.tags = self.bookModel?.tags as? [String] ?? []
        detailHeaderView.model = self.bookModel
        contentView.longIntro = self.bookModel?.longIntro ?? ""
        let sText = [bookModel?.latelyFollower ?? "0","\(bookModel?.retentionRatio ?? "0")%","\(bookModel?.serializeWordCount ?? "未知")"]
        rateView.rate = sText
        self.tableView.reloadData()
    }
}
